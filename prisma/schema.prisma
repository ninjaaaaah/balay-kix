generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profiles {
  id         String            @id @db.Uuid
  updatedAt  DateTime?         @db.Timestamptz(6)
  email      String?
  username   String?           @unique
  firstname  String?
  lastname   String?
  avatarLink String?
  website    String?
  groups     groupenrollment[]
  loans      invoice[]         @relation(name: "loan")
  debts      invoice[]         @relation(name: "debt")
}

model group {
  id      Int               @id @default(autoincrement()) @db.Oid
  name    String
  members groupenrollment[]
  invoice invoice[]
  expense expense[]
}

model groupenrollment {
  createdAt DateTime        @default(now())
  role      TransactionRole

  // Relation Fields
  userId  String   @db.Uuid
  groupId Int      @db.Oid
  user    profiles @relation(fields: [userId], references: [id])
  group   group    @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
  @@index([userId, role])
}

model expense {
  id        Int       @id @default(autoincrement()) @db.Oid
  updatedAt DateTime? @db.Timestamptz(6)
  name      String
  cost      Float
  date      DateTime? @db.Timestamptz(6)

  // Relation Fields
  groupId Int       @db.Oid
  group   group     @relation(fields: [groupId], references: [id])
  invoice invoice[]
}

model invoice {
  id        Int      @id @default(autoincrement()) @db.Oid
  createdAt DateTime @default(now())
  paid      Boolean  @default(false)

  // Relation Fields
  payeeId   String   @db.Uuid
  payee     profiles @relation(name: "loan", fields: [payeeId], references: [id])
  payorId   String   @db.Uuid
  payor     profiles @relation(name: "debt", fields: [payorId], references: [id])
  expenseId Int      @db.Oid
  expense   expense  @relation(fields: [expenseId], references: [id])
  group     group?   @relation(fields: [groupId], references: [id])
  groupId   Int      @db.Oid
}

enum TransactionRole {
  PAYEE
  PAYOR
}
